{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Helix \u00b6 Helix is a library written in Rust providing core features for getting your N64 software running on PC and other systems. Features Provided \u00b6 [x] Audio Playback (audio) [x] Speech Synthesis (speech) [x] TCP Stream (network) For details on each of the features provided please see our documentation . How to setup? \u00b6 For setup and more in-depth information please see our documentation .","title":"Overview"},{"location":"#helix","text":"Helix is a library written in Rust providing core features for getting your N64 software running on PC and other systems.","title":"Helix"},{"location":"#features-provided","text":"[x] Audio Playback (audio) [x] Speech Synthesis (speech) [x] TCP Stream (network) For details on each of the features provided please see our documentation .","title":"Features Provided"},{"location":"#how-to-setup","text":"For setup and more in-depth information please see our documentation .","title":"How to setup?"},{"location":"features/","text":"Features \u00b6 Audio \u00b6 Helix provides functionality for audio playback. Audio playback is simple and Helix provides the following API: /** * Creates and sets up the audio player, returning a pointer to the instance or nullptr if creation failed **/ void * HLXAudioPlayerCreate ( uint32_t sampleRate , uint16_t channels ); // Rust: let mut audio_Player = AudiPlayer::new().unwrap(); /** * Frees the audio player instance. **/ void HLXAudioPlayerFree ( void * player ); // Rust: no dedicated method, instance drop will deallocate it /** * Returns the amount of data currently in buffer. **/ int32_t HLXAudioPlayerGetBuffered ( void * player ); // Rust: audio_player.buffered() -> i32 /** * Returns the amount of data we want the buffer to contain. **/ int32_t HLXAudioPlayerGetDesiredBuffered ( void * player ); // Rust: audio_player.desired_buffer() -> i32 /** * Plays the audio from the given buffer - resampling if necessary for audio output device. **/ void HLXAudioPlayerPlayBuffer ( void * player , const uint8_t * buf , size_t len ); // Rust: audio_player.play_buffer(buf: &[u8]) Speech \u00b6 Helix provides an API for text-to-speech (TTS): /** * Creates and sets up the audio synthesizer, returning a pointer to the instance or nullptr if creation failed **/ void * HLXSpeechSynthesizerCreate ( void ); // Rust: let mut speech_synthesizer = SpeechSynthesizer::new().unwrap(); /** * Frees the speech synthesizer instance. **/ void HLXSpeechSynthesizerFree ( void * synthesizer ); // Rust: no dedicated method, instance drop will deallocate it /** * Sets the volume for the synthesizer, scale from 0-1. **/ void HLXSpeechSynthesizerSetVolume ( void * synthesizer , float volume ); // Rust: speech_synthesizer.set_volume(volume: f32) /** * Sets the language of the speaker, takes in a en-US type locale. **/ void HLXSpeechSynthesizerSetLanguage ( void * synthesizer , const char * language ); // Rust: speech_synthesizer.set_language(language: &str) /** * Sets the gender of the speaker, accepted values: HLXSpeechSynthesizerGenderFemale/Male/Neutral. **/ void HLXSpeechSynthesizerSetGender ( void * synthesizer , HLXSpeechSynthesizerGender gender ); // Rust: speech_synthesizer.set_gender(gender: HLXSpeechSynthesizerGender) /** * Dictates the given text, specifying whether previous utterances should be interrupted. **/ void HLXSpeechSynthesizerSpeak ( void * synthesizer , const char * text , uint8_t interrupt ); // Rust: speech_synthesizer.speak(text: &str, interrupt: bool)","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#audio","text":"Helix provides functionality for audio playback. Audio playback is simple and Helix provides the following API: /** * Creates and sets up the audio player, returning a pointer to the instance or nullptr if creation failed **/ void * HLXAudioPlayerCreate ( uint32_t sampleRate , uint16_t channels ); // Rust: let mut audio_Player = AudiPlayer::new().unwrap(); /** * Frees the audio player instance. **/ void HLXAudioPlayerFree ( void * player ); // Rust: no dedicated method, instance drop will deallocate it /** * Returns the amount of data currently in buffer. **/ int32_t HLXAudioPlayerGetBuffered ( void * player ); // Rust: audio_player.buffered() -> i32 /** * Returns the amount of data we want the buffer to contain. **/ int32_t HLXAudioPlayerGetDesiredBuffered ( void * player ); // Rust: audio_player.desired_buffer() -> i32 /** * Plays the audio from the given buffer - resampling if necessary for audio output device. **/ void HLXAudioPlayerPlayBuffer ( void * player , const uint8_t * buf , size_t len ); // Rust: audio_player.play_buffer(buf: &[u8])","title":"Audio"},{"location":"features/#speech","text":"Helix provides an API for text-to-speech (TTS): /** * Creates and sets up the audio synthesizer, returning a pointer to the instance or nullptr if creation failed **/ void * HLXSpeechSynthesizerCreate ( void ); // Rust: let mut speech_synthesizer = SpeechSynthesizer::new().unwrap(); /** * Frees the speech synthesizer instance. **/ void HLXSpeechSynthesizerFree ( void * synthesizer ); // Rust: no dedicated method, instance drop will deallocate it /** * Sets the volume for the synthesizer, scale from 0-1. **/ void HLXSpeechSynthesizerSetVolume ( void * synthesizer , float volume ); // Rust: speech_synthesizer.set_volume(volume: f32) /** * Sets the language of the speaker, takes in a en-US type locale. **/ void HLXSpeechSynthesizerSetLanguage ( void * synthesizer , const char * language ); // Rust: speech_synthesizer.set_language(language: &str) /** * Sets the gender of the speaker, accepted values: HLXSpeechSynthesizerGenderFemale/Male/Neutral. **/ void HLXSpeechSynthesizerSetGender ( void * synthesizer , HLXSpeechSynthesizerGender gender ); // Rust: speech_synthesizer.set_gender(gender: HLXSpeechSynthesizerGender) /** * Dictates the given text, specifying whether previous utterances should be interrupted. **/ void HLXSpeechSynthesizerSpeak ( void * synthesizer , const char * text , uint8_t interrupt ); // Rust: speech_synthesizer.speak(text: &str, interrupt: bool)","title":"Speech"},{"location":"integration/","text":"Integration \u00b6 C/C++ Project \u00b6 If you\u2019re working on a C or C++ project the recommended way of integrating Helix into your project is using CMake. You can easily build and link this library by using Corrosion , a tool that integrate Rust libraries into C/C++ projects. You\u2019ll want to: Add this library as a submodule (or copy it) into your project Enable Corrosion using FetchContent (see their README) Include the features you want to be built using FEATURES . audio is always included. Link against the helix library Include the include folder of helix so your program can see the available methods NOTE: If you get a build error that certain header methods are not implemented, you\u2019re likely not building with that feature enabled. Example: corrosion_import_crate ( MANIFEST_PATH $ { CMAKE_CURRENT_SOURCE_DIR } / .. / helix / Cargo . toml FEATURES network ) # methods in these headers will work: # include <helix/network.h> , <helix/audio.h> # methods in these headers won't work: # include <helix/speech.h> Rust Project \u00b6 If you\u2019re working on a Rust project, you can add Helix via cargo add helix .","title":"Integration"},{"location":"integration/#integration","text":"","title":"Integration"},{"location":"integration/#cc-project","text":"If you\u2019re working on a C or C++ project the recommended way of integrating Helix into your project is using CMake. You can easily build and link this library by using Corrosion , a tool that integrate Rust libraries into C/C++ projects. You\u2019ll want to: Add this library as a submodule (or copy it) into your project Enable Corrosion using FetchContent (see their README) Include the features you want to be built using FEATURES . audio is always included. Link against the helix library Include the include folder of helix so your program can see the available methods NOTE: If you get a build error that certain header methods are not implemented, you\u2019re likely not building with that feature enabled. Example: corrosion_import_crate ( MANIFEST_PATH $ { CMAKE_CURRENT_SOURCE_DIR } / .. / helix / Cargo . toml FEATURES network ) # methods in these headers will work: # include <helix/network.h> , <helix/audio.h> # methods in these headers won't work: # include <helix/speech.h>","title":"C/C++ Project"},{"location":"integration/#rust-project","text":"If you\u2019re working on a Rust project, you can add Helix via cargo add helix .","title":"Rust Project"}]}